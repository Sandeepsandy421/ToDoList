@page "/todo"
@using System.Linq
@using TodoItem.Models;

<PageTitle>Todo</PageTitle>

<div class="container my-5">
    <div class="card shadow-lg border-0 rounded-4">
        <div class="card-header bg-primary text-white rounded-top-4">
            <h3 class="mb-0 d-flex align-items-center">
                <i class="bi bi-list-task me-2"></i> To-Do List
            </h3>
        </div>
        <div class="card-body p-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="text-muted">
                    <span class="badge bg-secondary me-2">
                        <i class="bi bi-hourglass-split me-1"></i> Pending: @todos.Count(x => !x.IsDone)
                    </span>
                    <span class="badge bg-success">
                        <i class="bi bi-check-circle-fill me-1"></i> Completed: @todos.Count(x => x.IsDone)
                    </span>
                </div>
                <button class="btn btn-outline-danger btn-sm" @onclick="ClearCompleted" disabled="@(todos.All(x => !x.IsDone))">
                    <i class="bi bi-trash"></i> Clear Completed
                </button>
            </div>

            <div class="input-group mb-4">
                <input class="form-control form-control-lg rounded-start-3" 
                       placeholder="Add a new task..." 
                       @bind="newTodo"  />
                <button class="btn btn-primary rounded-end-3" @onclick="AddTodo">
                    <i class="bi bi-plus-circle me-1"></i> Add Task
                </button>
            </div>

            @if (todos.Count == 0)
            {
                <div class="alert alert-info text-center rounded-3 animate__animated animate__fadeIn">
                    <i class="bi bi-info-circle me-2"></i> No tasks yet. Start by adding one above!
                </div>
            }
            else
            {
                <ul class="list-group list-group-flush">
                    @foreach (var todo in todos)
                    {
                        <li class="list-group-item d-flex align-items-center justify-content-between py-3 animate__animated animate__fadeInUp">
                            <div class="d-flex align-items-center">
                                <input class="form-check-input me-3" 
                                       type="checkbox" 
                                       @bind="todo.IsDone" />
                                <span class="@GetTodoClass(todo)">@todo.Name</span>
                            </div>
                            <button class="btn btn-outline-danger btn-sm" 
                                    @onclick="() => RemoveTodo(todo)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

<style>
    .list-group-item {
        transition: all 0.3s ease;
    }
    .list-group-item:hover {
        background-color: #f8f9fa;
        transform: translateY(-2px);
    }
    .text-decoration-line-through {
        opacity: 0.7;
    }
    .form-control:focus {
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
</style>

@code {
    private string? newTodo;
    private List<TodoItem> todos = new();

    private void AddTodo()
    {
        if (string.IsNullOrWhiteSpace(newTodo)) return;

        todos.Add(new TodoItem { Name = newTodo });
        newTodo = string.Empty;
    }

    private void RemoveTodo(TodoItem todo)
    {
        todos.Remove(todo);
    }

    private void ClearCompleted()
    {
        todos.RemoveAll(x => x.IsDone);
    }

    private string GetTodoClass(TodoItem item) =>
        item.IsDone ? "text-decoration-line-through text-muted" : "";

}